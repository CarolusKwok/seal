}
#Return `F` if nothing wrong ####
return(flag)
}
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
if(2){print("hi")}
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
nchar(c("hi"))
nchar(c("hi", "bye"))
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
seal:::sys_msgerror()
library(seal)
seal:::sys_msgerror()
seal::sys_msgerror()
?is.na.data.frame()
anyNA()
library(seal)
stringr::str_extract_all("#", "#")
stringr::str_extract_all("#hi", "#")
stringr::str_extract_all(c("#hi", "#bye"), "#")
stringr::str_extract_all(c("#hi", "#bye"), "#", simplify = F)
stringr::str_extract_all(c("#hi", "#bye"), "#", simplify = )
stringr::str_extract_all(c("#hi", "#bye"), "#", simplify = T)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("dtck")
library(seal)
library(seal)
library(seal)
library(seal)
if(!("@code" %in% data_colnames)){
seal:::sys_msgerror(title = "`@code` not present in `data`",
error = c("x" = "Please include the {.code @code} column."),
func = "mtck_data")
return(T)
}
library(seal)
?invisibile
??invisible
library(seal)
library(seal)
library(seal)
usethis::use_r("check_data")
library(seal)
library(seal)
usethis::use_r("sys_tld_GetColname")
usethis::use_r("sys_hp")
usethis::use_package("rlang")
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("test")
#' @param factor the `factor` matrix in dataframe or tibble.
#' @param item the `item` matrix in dataframe or tibble.
#' @param data the `data` matrix in dataframe or tibble.
#' @param silent Will this function return an error message? Default as `FALSE`, which will display a text message.
#' @param func The function name that called this function, which is to be passed to `sys_msgerror` or `sys_msgwarning`. Default as `"ckdt_set"`. If `NULL`, the function name will not display.
#'
#' @return a logical value, with `TRUE` representing an error occurred; and a standardized message if `silent` is `FALSE`.
#' @export
#'
#' @examples ckdt_set(factor, item, data)
ckdt_pre = function(factor, item, data, silent = FALSE, func = "ckdt_set"){
#Run basic check of the matrix ####
if(seal::ckmt_factor(factor, silent = silent, func = func)){return(invisible(TRUE))}
if(seal::ckmt_item(item, silent = silent, func = func)){return(invisible(TRUE))}
if(seal::ckmt_data(data, silent = silent, func = func)){return(invisible(TRUE))}
#Run cooperative check of the matrix, Obtain factors and items from data####
data_colnames = colnames(data)
data_factor = stringr::str_sub(data_colnames, start = 1L, end = 1L) %>%
stringr::str_detect(pattern = "#") %>%
data_colnames[.]
data_item = stringr::str_sub(data_colnames, start = 1L, end = 1L) %>%
stringr::str_detect(pattern = "#|@", negate = T) %>%
data_colnames[.]
factor_factor = unique(factor$factor)
item_item = unique(item$item)
##Check if factors in data are described in `factor` ####
if(sum(data_factor %in% factor_factor) != length(data_factor)){
return(invisible(seal:::sys_msgerror(title = "Not all factors in data are described in `factor`",
error = c("x" = "Please double check {.code factor}"),
func = func, silent = silent)))
}
##Check if items in data are described in `item` ####
if(sum(data_factor %in% factor_factor) != length(data_factor)){
return(invisible(seal:::sys_msgerror(title = "Not all items in data are described in `item`",
error = c("x" = "Please double check {.code item}"),
func = func, silent = silent)))
}
##Check if factors are correctly described with labels ####
custom_message = function(factor, func, silent){
title = paste0("Factor `", factor, "` is described incorrectly")
return(invisible(seal:::sys_msgerror(title = title,
error = c("x" = "Please check the `factor` and `data` matrix"),
func = func, silent = silent)))
}
for(i in data_factor){
df_label_sel = dplyr::filter(factor,
factor == i)$label
df_data_sel = dplyr::select(.data = data,
{{i}})[,1]
if(df_label_sel[1] != "###"){
if(sum(!(df_data_sel %in% df_label_sel))){
return(invisible(custom_message(factor = i, func = func, silent = silent)))
}
}
}
##Check if items are correctly described with datatype ####
custom_message = function(item, func, silent){
title = paste0("Item `", item, "` is described incorrectly")
return(invisible(seal:::sys_msgerror(title = title,
error = c("x" = "Please check the `item` and `data` matrix"),
func = func, silent = silent)))
}
for(i in data_item){
df_item_sel = dplyr::filter(item,
item == i)$datatype
df_data_sel = dplyr::select(.data = data, {{i}}) %>%
.[,1] %>%
class()
if(df_item_sel == "p" &  != "logical"){
1 == 1L
1&2
1&0
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("read")
library(seal)
library(seal)
usethis::use_r("sys_msg_standard_error")
sys_msgerror_noinput = function(arg, expect,
silent = FALSE,
func = NULL,
return_flag = TRUE){
#check for input####
if(!hasArg(arg)){
return(seal:::sys_msgerror(title = "`arg` must have an input.",
error = c("x" = "Please input `arg`."),
func = "sys_msgerror_noinput", silent = FALSE) %>% invisible)
}
if(!hasArg(expect)){
return(seal:::sys_msgerror(title = "`expect` must have an input.",
error = c("x" = "Please input `expected`."),
func = "sys_msgerror_noinput", silent = FALSE) %>% invisible)
}
#magic ####
return(seal:::sys_msgerror(title = "`{arg}` must have an input.",
error = c("x" = "Please input {expect}."),
silent = silent,
func = func,
return_flag = return_flag))
}
sys_msgerror_noinput("hi", "bye")
sys_msgerror_noinput(arg = "hi", expect = "bye")
sys_msgerror_noinput = function(arg, expect,
silent = FALSE,
func = NULL,
return_flag = TRUE){
#check for input####
if(!hasArg(arg)){
return(seal:::sys_msgerror(title = "`arg` must have an input.",
error = c("x" = "Please input `arg`."),
func = "sys_msgerror_noinput", silent = FALSE) %>% invisible)
}
if(!hasArg(expect)){
return(seal:::sys_msgerror(title = "`expect` must have an input.",
error = c("x" = "Please input `expected`."),
func = "sys_msgerror_noinput", silent = FALSE) %>% invisible)
}
#magic ####
return(seal:::sys_msgerror(title = paste0("`", arg, "` must have an input."),
error = c("x" = paste0("Please input ", expect, ".")),
silent = silent,
func = func,
return_flag = return_flag))
}
sys_msgerror_noinput(arg = "hi", expect = "bye")
library(seal)
library(seal)
seal:::sys_msgs_noinput(arg = "factor",
expect = c("data.frame", "tibble"))
stringr::str_flatten(c("data", "igh"), collapse = ", ")
library(seal)
seal:::sys_msgs_noinput(arg = "factor",
expect = c("data.frame", "tibble"))
library(seal)
library(seal)
?seal:::sys_msgsdf_columnnotfull()
??seal:::sys_msgsdf_columnnotfull
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("precheck_sheet")
usethis::use_r("sys_obtain")
library(seal)
library(seal)
usthis::use_r("precheck_matrix_factor")
usethis::use_r("precheck_matrix_factor")
usethis::use_r("precheck_matrix_item")
usethis::use_r("precheck_matrix_data")
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("check_matrix_data")
usethis::use_r("check_matrix_factor")
usethis::use_r("check_matrix_item")
usethis::use_r("check_matrix_sheet")
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
tibble::tibble() %>% class()
class(tibble::tibble() )
library(seal)
list(list(hi = "a"))
list(list(hi = "a")) %>%
.
list(list(hi = "a"))[1]
list(list(hi = "a"))[[1]]
library(seal)
library(seal)
usethis::use_r("read_sed")
??read_csv
library(seal)
library(seal)
???seal
??seal
?seal
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("is")
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
c("a", "b", "c")[c("a", "b", "c") != "b"]
library(seal)
library(seal)
library(seal)
library(seal)
data.frame() %>% class()
class(data.frame())
library(seal)
library(seal)
library(seal)
usethis::use_r("print")
library(seal)
library(seal)
usethis::use_r("print_matrix")
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_pipe
usethis::use_pipe()
usethis::use_pipe()
usethis::use_pipe()
library(seal)
devtools::document()
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("sys_tl_p2logical")
library(seal)
library(seal)
library(seal)
class(c(1,2,3))
class(c("x"))
library(seal)
library(seal)
usethis::use_r("ck_matrix_data")
usethis::use_r("ck_matrix_factor")
usethis::use_r("ck_matrix_item")
?is()
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("sys_msg_error")
usethis::use_r("sys_msg_warn")
cli::cli_alert_warning("hi")
cli::cli_alert_danger("hi")
library(seal)
seal:::sys_msg_error("hi", "hi")
library(seal)
seal:::sys_msg_error("hi", "hi")
library(seal)
seal:::sys_msg_error("hi", c("hi", "hi"))
library(seal)
library(seal)
seal:::sys_msg_error("hi", c("hi", "hi"))
library(seal)
seal:::sys_msg_error("hi", c("hi", "hi"))
library(seal)
seal:::sys_msg_error("hi", c("hi", "hi"))
library(seal)
seal:::sys_msg_error("hi", c("hi", "hi"))
library(seal)
seal:::sys_msg_error("hi", c("hi", "hi"))
library(seal)
library(seal)
usethis::use_r("sys_tl")
library(seal)
library(seal)
data.frame(a = 1,)
data.frame(a = 1, b = 2)
data.frame(a = 1, b = 2) %>% lapply(class)
library(magrittr)
data.frame(a = 1, b = 2) %>% lapply(class)
data.frame(a = 1, b = 2) %>% lapply(class) %>% unlist
data.frame(a = 1, b = 2) %>% lapply(class) %>% unlist %>% names
?unclass
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("ckrw_sheet")
seal:::sys_grab_sheetdata()
library(seal)
library(seal)
library(seal)
usethis::use_r("read_sed")
usethis::use_r("ckrw_data")
library(seal)
library(seal)
usethis::use_r("ckrw_matrix_factor")
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("ckrw_item")
library(seal)
usethis::use_r("ckrw_dataset")
library(seal)
library(seal)
usethis::use_r("ff")
library(seal)
library(seal)
usethis::use_r("format_sed")
library(seal)
library(seal)
usethis::use_r("read_")
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("sys_tld_autodatatype")
library(seal)
library(seal)
usethis::use_r("forge_sed")
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("extract")
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("sed_merge")
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("sed_save")
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("sed_extract")
library(seal)
usethis::use_r("cal_ToLogical")
library(seal)
usethis::use_r("cal_FilterItem")
library(seal)
library(seal)
library(seal)
usethis::use_r("cal_FilterItem")
library(seal)
usethis::use_r("cal_FilterItem")
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("cal_group_add")
library(seal)
library(seal)
usethis::use_r("calc_ungroup")
library(seal)
library(seal)
