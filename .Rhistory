if(factor_hashed != 0){
seal:::sys_msgerror(title = 'abbr of "###" must be "#"',
error = c("x" = 'Please make the abbr of "###" must be "#"'),
func = "factor_check")
return(T)
}
}
#Return `F` if nothing wrong ####
return(F)
}
mtck_factor(factor = factor)
View(factor)
library(seal)
library(seal)
usethis::use_pipe()
library(seal)
tibble::tibble()
tibble::tibble() %>% class()
tibble::tibble() %>% class()
library(lubridate)
tibble::tibble() %>% class()
tibble::tibble() %>% class()
library(magrittr)
tibble::tibble() %>% class()
#' Matrix: Check the `factor` matrix if it suits the requirements
#'
#' @param factor the `factor` matrix in dataframe or tibble.
#'
#' @return a logical value, with `TRUE` representing an error occurred.
#' @export
#'
#' @examples mtck_factor(factor)
mtck_factor = function(factor){
flag = F
#Check if `factor` is a dataframe or tibble ####
if((!is.data.frame(factor))){
seal::sys_msgerror(title = "`factor` must be a dataframe or a tibble",
error = c("x" = "Please convert it into a dataframe or a tibble."),
func = "mtck_factor")
return(T)
}
#Check if column names include `factor`, `label`, `abbr` ####
columns = colnames(factor)
for(i in c("factor", "label", "abbr")){
if(!(i %in% columns)){
seal:::sys_msgerror(title = "`{i}` not present in `factor`",
error = c("x" = "Please include the {.code {i}} column."),
func = "mtck_factor")
flag = T
}
}
#Check if all item in the factor column has a "#" prefix ####
list_factor = factor$factor
list_factor_prefix = list_factor %>%
stringr::str_sub(start = 1L, end = 1L) %>%
stringr::str_detect(pattern = "#", negate = T)
if(sum(list_factor_prefix) > 0){
seal:::sys_msgerror(title = "Not all in `factor` are factors",
error = c("x" = 'Please make sure all items in {.code factor} have a "#" prefix.'),
func = "mtck_factor")
flag = T
}
#Check if all items in the label column is filled ####
list_label_NA = is.na(factor$label)
if(sum(list_label_NA) > 0){
seal:::sys_msgerror(title = "Not all in `label` are filled in `label`",
error = c("x" = 'Please make sure all items in {.code label} is filled.'),
func = "mtck_factor")
flag = T
}
#Check if items in the label column is unique and check if "###" is present with other factors
list_factor = unique(factor$factor)
for(i in list_factor){
factor_sel = dplyr::filter(factor, factor == i)
if(length(factor_sel$label) != length(unique(factor_sel$label))){
seal:::sys_msgerror(title = "Labels in factor `{i}` is not unique",
error = c("x" = 'Please make sure all labels in the factor is unique.'),
func = "mtck_factor")
flag = T
}
if((length(factor_sel$label) > 1) & ("###" %in% factor_sel$label)){
seal:::sys_msgerror(title = '"###" must not be present with other labels in factor `{i}`',
error = c("x" = 'Please make sure the labels makes sense.'),
func = "mtck_factor")
flag = T
}
}
#Check if all items in the abbr column is all filled or all not filled ####
list_abbr_NA = is.na(factor$abbr)
list_abbr_length = length(factor$abbr)
if((list_abbr_length != sum(list_abbr_NA)) & (list_abbr_length != sum(!list_abbr_NA))){
seal:::sys_msgerror(title = "`abbr` column must be all filled or all empty",
error = c("x" = 'Please make sure all items in {.code label} is filled or remain empty.'),
func = "mtck_factor")
flag = T
}
#Check if there is "###" item in label and check if the respective abbr is "#"####
if(sum(!list_abbr_NA) > 0){
factor_hashed = dplyr::filter(.data = factor,
factor == "###",
abbr != "#")
if(factor_hashed != 0){
seal:::sys_msgerror(title = 'abbr of "###" must be "#"',
error = c("x" = 'Please make the abbr of "###" must be "#"'),
func = "mtck_factor")
flag = T
}
}
#Return `F` if nothing wrong ####
return(flag)
}
#' Matrix: Check the `item` matrix if it suits the requirements
#'
#' @param item the `item` matrix in dataframe or tibble.
#'
#' @return a logical value, with `TRUE` representing an error occurred.
#' @export
#'
#' @examples
mtck_item = function(item){
flag = F
#Check if `item` is a dataframe or tibble ####
if((!is.data.frame(factor))){
seal::sys_msgerror(title = "`item` must be a dataframe or a tibble",
error = c("x" = "Please convert it into a dataframe or a tibble."),
func = "mtck_item")
flag = T
}
#Check if column names include `item`, `datatype` ####
columns = colnames(factor)
for(i in c("item", "datatype")){
if(!(i %in% columns)){
seal:::sys_msgerror(title = "`{i}` not present in `item`",
error = c("x" = "Please include the {.code {i}} column."),
func = "mtck_item")
flag = T
}
}
#Check if there is NA ####
if(sum(is.na(item$item))){
seal:::sys_msgerror(title = "`item` contains {.code NA}",
error = c("x" = "Please fill all items in `item`."),
func = "mtck_item")
flag = T
}
if(sum(is.na(item$datatype))){
seal:::sys_msgerror(title = "`datatype` contains {.code NA}",
error = c("x" = "Please fill all items in `item`."),
func = "mtck_item")
flag = T
}
#Check if datatype only contains "p", "n", "i", "c" ####
if(!(item$datatype %in% c("p", "n", "i", "c"))){
seal:::sys_msgerror(title = "`datatype` must only contain p, n, i, c",
error = c("x" = "Please fill in the datatype correctly"),
func = "mtck_item")
flag = T
}
#Return `F` if nothing wrong ####
return(flag)
}
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
if(2){print("hi")}
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
nchar(c("hi"))
nchar(c("hi", "bye"))
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
seal:::sys_msgerror()
library(seal)
seal:::sys_msgerror()
seal::sys_msgerror()
?is.na.data.frame()
anyNA()
library(seal)
stringr::str_extract_all("#", "#")
stringr::str_extract_all("#hi", "#")
stringr::str_extract_all(c("#hi", "#bye"), "#")
stringr::str_extract_all(c("#hi", "#bye"), "#", simplify = F)
stringr::str_extract_all(c("#hi", "#bye"), "#", simplify = )
stringr::str_extract_all(c("#hi", "#bye"), "#", simplify = T)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("dtck")
library(seal)
library(seal)
library(seal)
library(seal)
if(!("@code" %in% data_colnames)){
seal:::sys_msgerror(title = "`@code` not present in `data`",
error = c("x" = "Please include the {.code @code} column."),
func = "mtck_data")
return(T)
}
library(seal)
?invisibile
??invisible
library(seal)
library(seal)
library(seal)
usethis::use_r("check_data")
library(seal)
library(seal)
usethis::use_r("sys_tld_GetColname")
usethis::use_r("sys_hp")
usethis::use_package("rlang")
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("test")
#' @param factor the `factor` matrix in dataframe or tibble.
#' @param item the `item` matrix in dataframe or tibble.
#' @param data the `data` matrix in dataframe or tibble.
#' @param silent Will this function return an error message? Default as `FALSE`, which will display a text message.
#' @param func The function name that called this function, which is to be passed to `sys_msgerror` or `sys_msgwarning`. Default as `"ckdt_set"`. If `NULL`, the function name will not display.
#'
#' @return a logical value, with `TRUE` representing an error occurred; and a standardized message if `silent` is `FALSE`.
#' @export
#'
#' @examples ckdt_set(factor, item, data)
ckdt_pre = function(factor, item, data, silent = FALSE, func = "ckdt_set"){
#Run basic check of the matrix ####
if(seal::ckmt_factor(factor, silent = silent, func = func)){return(invisible(TRUE))}
if(seal::ckmt_item(item, silent = silent, func = func)){return(invisible(TRUE))}
if(seal::ckmt_data(data, silent = silent, func = func)){return(invisible(TRUE))}
#Run cooperative check of the matrix, Obtain factors and items from data####
data_colnames = colnames(data)
data_factor = stringr::str_sub(data_colnames, start = 1L, end = 1L) %>%
stringr::str_detect(pattern = "#") %>%
data_colnames[.]
data_item = stringr::str_sub(data_colnames, start = 1L, end = 1L) %>%
stringr::str_detect(pattern = "#|@", negate = T) %>%
data_colnames[.]
factor_factor = unique(factor$factor)
item_item = unique(item$item)
##Check if factors in data are described in `factor` ####
if(sum(data_factor %in% factor_factor) != length(data_factor)){
return(invisible(seal:::sys_msgerror(title = "Not all factors in data are described in `factor`",
error = c("x" = "Please double check {.code factor}"),
func = func, silent = silent)))
}
##Check if items in data are described in `item` ####
if(sum(data_factor %in% factor_factor) != length(data_factor)){
return(invisible(seal:::sys_msgerror(title = "Not all items in data are described in `item`",
error = c("x" = "Please double check {.code item}"),
func = func, silent = silent)))
}
##Check if factors are correctly described with labels ####
custom_message = function(factor, func, silent){
title = paste0("Factor `", factor, "` is described incorrectly")
return(invisible(seal:::sys_msgerror(title = title,
error = c("x" = "Please check the `factor` and `data` matrix"),
func = func, silent = silent)))
}
for(i in data_factor){
df_label_sel = dplyr::filter(factor,
factor == i)$label
df_data_sel = dplyr::select(.data = data,
{{i}})[,1]
if(df_label_sel[1] != "###"){
if(sum(!(df_data_sel %in% df_label_sel))){
return(invisible(custom_message(factor = i, func = func, silent = silent)))
}
}
}
##Check if items are correctly described with datatype ####
custom_message = function(item, func, silent){
title = paste0("Item `", item, "` is described incorrectly")
return(invisible(seal:::sys_msgerror(title = title,
error = c("x" = "Please check the `item` and `data` matrix"),
func = func, silent = silent)))
}
for(i in data_item){
df_item_sel = dplyr::filter(item,
item == i)$datatype
df_data_sel = dplyr::select(.data = data, {{i}}) %>%
.[,1] %>%
class()
if(df_item_sel == "p" &  != "logical"){
1 == 1L
1&2
1&0
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("read")
library(seal)
library(seal)
usethis::use_r("sys_msg_standard_error")
sys_msgerror_noinput = function(arg, expect,
silent = FALSE,
func = NULL,
return_flag = TRUE){
#check for input####
if(!hasArg(arg)){
return(seal:::sys_msgerror(title = "`arg` must have an input.",
error = c("x" = "Please input `arg`."),
func = "sys_msgerror_noinput", silent = FALSE) %>% invisible)
}
if(!hasArg(expect)){
return(seal:::sys_msgerror(title = "`expect` must have an input.",
error = c("x" = "Please input `expected`."),
func = "sys_msgerror_noinput", silent = FALSE) %>% invisible)
}
#magic ####
return(seal:::sys_msgerror(title = "`{arg}` must have an input.",
error = c("x" = "Please input {expect}."),
silent = silent,
func = func,
return_flag = return_flag))
}
sys_msgerror_noinput("hi", "bye")
sys_msgerror_noinput(arg = "hi", expect = "bye")
sys_msgerror_noinput = function(arg, expect,
silent = FALSE,
func = NULL,
return_flag = TRUE){
#check for input####
if(!hasArg(arg)){
return(seal:::sys_msgerror(title = "`arg` must have an input.",
error = c("x" = "Please input `arg`."),
func = "sys_msgerror_noinput", silent = FALSE) %>% invisible)
}
if(!hasArg(expect)){
return(seal:::sys_msgerror(title = "`expect` must have an input.",
error = c("x" = "Please input `expected`."),
func = "sys_msgerror_noinput", silent = FALSE) %>% invisible)
}
#magic ####
return(seal:::sys_msgerror(title = paste0("`", arg, "` must have an input."),
error = c("x" = paste0("Please input ", expect, ".")),
silent = silent,
func = func,
return_flag = return_flag))
}
sys_msgerror_noinput(arg = "hi", expect = "bye")
library(seal)
library(seal)
seal:::sys_msgs_noinput(arg = "factor",
expect = c("data.frame", "tibble"))
stringr::str_flatten(c("data", "igh"), collapse = ", ")
library(seal)
seal:::sys_msgs_noinput(arg = "factor",
expect = c("data.frame", "tibble"))
library(seal)
library(seal)
?seal:::sys_msgsdf_columnnotfull()
??seal:::sys_msgsdf_columnnotfull
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("precheck_sheet")
usethis::use_r("sys_obtain")
library(seal)
library(seal)
usthis::use_r("precheck_matrix_factor")
usethis::use_r("precheck_matrix_factor")
usethis::use_r("precheck_matrix_item")
usethis::use_r("precheck_matrix_data")
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("check_matrix_data")
usethis::use_r("check_matrix_factor")
usethis::use_r("check_matrix_item")
usethis::use_r("check_matrix_sheet")
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
tibble::tibble() %>% class()
class(tibble::tibble() )
library(seal)
list(list(hi = "a"))
list(list(hi = "a")) %>%
.
list(list(hi = "a"))[1]
list(list(hi = "a"))[[1]]
library(seal)
library(seal)
usethis::use_r("read_sed")
??read_csv
library(seal)
library(seal)
???seal
??seal
?seal
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_r("is")
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
c("a", "b", "c")[c("a", "b", "c") != "b"]
library(seal)
library(seal)
library(seal)
library(seal)
data.frame() %>% class()
class(data.frame())
library(seal)
library(seal)
library(seal)
usethis::use_r("print")
library(seal)
library(seal)
usethis::use_r("print_matrix")
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
usethis::use_pipe
usethis::use_pipe()
usethis::use_pipe()
usethis::use_pipe()
library(seal)
devtools::document()
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
library(seal)
